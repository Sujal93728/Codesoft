import math

# Display the board
def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

# Check for a winner or draw
def check_winner(board):
    for row in board:
        if row.count(row[0]) == 3 and row[0] != ' ':
            return row[0]

    for col in range(3):
        if board[0][col] != ' ' and all(board[row][col] == board[0][col] for row in range(3)):
            return board[0][col]

    if board[0][0] != ' ' and all(board[i][i] == board[0][0] for i in range(3)):
        return board[0][0]

    if board[0][2] != ' ' and all(board[i][2 - i] == board[0][2] for i in range(3)):
        return board[0][2]

    if all(cell != ' ' for row in board for cell in row):
        return 'Draw'

    return None

# Minimax Algorithm with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    result = check_winner(board)
    if result == 'O': return 1
    elif result == 'X': return -1
    elif result == 'Draw': return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

# AI chooses the best move
def best_move(board):
    best_val = -math.inf
    move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                move_val = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = ' '
                if move_val > best_val:
                    best_val = move_val
                    move = (i, j)
    return move

# Play the game
def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe! You are X, AI is O.")

    while True:
        print_board(board)
        # Human move
        while True:
            try:
                row = int(input("Enter row (0, 1, 2): "))
                col = int(input("Enter col (0, 1, 2): "))
                if board[row][col] == ' ':
                    board[row][col] = 'X'
                    break
                else:
                    print("Cell already taken. Try again.")
            except (ValueError, IndexError):
                print("Invalid input. Try again.")

        result = check_winner(board)
        if result:
            print_board(board)
            print("Game Over:", "Draw" if result == 'Draw' else f"{result} wins!")
            break

        # AI move
        ai_row, ai_col = best_move(board)
        board[ai_row][ai_col] = 'O'
        print(f"AI played at {ai_row}, {ai_col}")

        result = check_winner(board)
        if result:
            print_board(board)
            print("Game Over:", "Draw" if result == 'Draw' else f"{result} wins!")
            break

if __name__ == "__main__":
    play_game()
